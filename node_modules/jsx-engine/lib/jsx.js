"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fragment = void 0;
const add_px_to_style_1 = __importDefault(require("add-px-to-style"));
// eslint-disable-next-line @typescript-eslint/naming-convention
const Fragment = Symbol("jsx.Fragment");
exports.Fragment = Fragment;
function jsx(nodeName, attributes, ...args) {
    const children = args.length ? [].concat(...args) : null;
    return { nodeName, attributes, children };
}
function css(style) {
    return Object.entries(style)
        .reduce((styleString, [propName, propValue]) => {
        const name = propName.replace(/([A-Z])/g, (matches) => `-${matches[0].toLowerCase()}`);
        return `${styleString} ${name}: ${add_px_to_style_1.default(name, propValue)};`;
    }, "")
        .trim();
}
function buildAttributes(attributes) {
    let html = "";
    Object.entries(attributes).forEach(([key, value]) => {
        if (key === "style" && typeof value === "object") {
            html += ` ${key}="${css(value)}"`;
        }
        else if (key === "children") {
            Object.assign(attributes, { children: value });
        }
        else if (key === "className") {
            html += ` class="${value}"`;
        }
        else {
            html += ` ${key}="${value}"`;
        }
    });
    return html;
}
jsx.render = function render(vnode) {
    if (!vnode) {
        return "";
    }
    if (typeof vnode === "string") {
        return vnode;
    }
    if (typeof vnode.nodeName === "function") {
        return render(vnode.nodeName(Object.assign(Object.assign({}, vnode.attributes), { children: (vnode.attributes && vnode.attributes.children) || vnode.children })));
    }
    if (vnode.nodeName === Fragment) {
        return (vnode.children || []).map((child) => render(child)).join("");
    }
    let html = `<${vnode.nodeName}`;
    const attributes = vnode.attributes || {};
    html += buildAttributes(attributes);
    html += ">";
    if ([
        "area",
        "base",
        "col",
        "embed",
        "link",
        "track",
        "wbr",
        "param",
        "source",
        "img",
        "input",
        "br",
        "hr",
        "meta",
    ].includes(vnode.nodeName)) {
        return html;
    }
    html += ((attributes && attributes.children) || vnode.children || [])
        .map((child) => render(child))
        .join("");
    html += `</${vnode.nodeName}>`;
    return html;
};
module.exports = jsx;
module.exports.Fragment = Fragment;
exports.default = jsx;
